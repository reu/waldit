# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `testcontainers-core` gem.
# Please instead update this file by running `bin/tapioca gem testcontainers-core`.


# source://testcontainers-core//lib/testcontainers/docker_container.rb#1
module Testcontainers
  class << self
    # source://testcontainers-core//lib/testcontainers.rb#30
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://testcontainers-core//lib/testcontainers.rb#28
    def logger=(_arg0); end
  end
end

# source://testcontainers-core//lib/testcontainers.rb#13
class Testcontainers::ConnectionError < ::Testcontainers::Error; end

# source://testcontainers-core//lib/testcontainers.rb#25
class Testcontainers::ContainerLaunchException < ::Testcontainers::Error; end

# source://testcontainers-core//lib/testcontainers.rb#19
class Testcontainers::ContainerNotStartedError < ::Testcontainers::Error; end

# The DockerContainer class is used to manage Docker containers.
# It provides an interface to create, start, stop, and manipulate containers
# using the Docker API.
#
# @attr name [String] the container's name
# @attr image [String] the container's image name
# @attr command [Array<String>, nil] the command to run in the container
# @attr entrypoint [Array<String>, nil] the entrypoint to run in the container
# @attr exposed_ports [Hash, nil] a hash mapping exposed container ports to an empty hash (used for Docker API compatibility)
# @attr port_bindings [Hash, nil] a hash mapping container ports to host port bindings (used for Docker API compatibility)
# @attr volumes [Hash, nil] a hash mapping volume paths in the container to an empty hash (used for Docker API compatibility)
# @attr filesystem_binds [Array<String>, nil] an array of strings representing bind mounts from the host to the container
# @attr env [Array<String>, nil] an array of environment variables for the container in the format KEY=VALUE
# @attr labels [Hash, nil] a hash of labels to be applied to the container
# @attr working_dir [String, nil] the working directory for the container
# @attr healthcheck [Hash, nil] a hash of healthcheck options for the container
# @attr logger [Logger] a logger instance for the container
# @attr_reader _container [Docker::Container, nil] the underlying Docker::Container object
# @attr_reader _id [String, nil] the container's ID
#
# source://testcontainers-core//lib/testcontainers/docker_container.rb#21
class Testcontainers::DockerContainer
  # Initializes a new DockerContainer instance.
  #
  # @param image [String] the container's image name
  # @param command [Array<String>, nil] the command to run in the container
  # @param name [String, nil] the container's name
  # @param exposed_ports [Hash, Array<String>, nil] a hash or an array of exposed container ports
  # @param image_create_options [Hash] a hash of options to pass to Docker::Image.create.
  # @param port_bindings [Hash, Array<String>, nil] a hash or an array of container ports to host port bindings
  # @param volumes [Hash, Array<String>, nil] a hash or an array of volume paths in the container
  # @param filesystem_binds [Array<String>, Hash, nil] an array of strings or a hash representing bind mounts from the host to the container
  # @param env [Array<String>, Hash, nil] an array or a hash of environment variables for the container in the format KEY=VALUE
  # @param labels [Hash, nil] a hash of labels to be applied to the container
  # @param working_dir [String, nil] the working directory for the container
  # @param logger [Logger] a logger instance for the container
  # @return [DockerContainer] a new instance of DockerContainer
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#41
  def initialize(image, name: T.unsafe(nil), command: T.unsafe(nil), entrypoint: T.unsafe(nil), exposed_ports: T.unsafe(nil), image_create_options: T.unsafe(nil), port_bindings: T.unsafe(nil), volumes: T.unsafe(nil), filesystem_binds: T.unsafe(nil), env: T.unsafe(nil), labels: T.unsafe(nil), working_dir: T.unsafe(nil), healthcheck: T.unsafe(nil), wait_for: T.unsafe(nil), logger: T.unsafe(nil)); end

  # the underlying Docker::Container object
  #
  # @return [Docker::Container, nil] the current value of _container
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#25
  def _container; end

  # the container's ID
  #
  # @return [String, nil] the current value of _id
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#25
  def _id; end

  # Add environment variables to the container configuration.
  #
  # @param env_or_key [String, Hash, Array] The environment variable(s) to add.
  #   - When passing a Hash, the keys and values represent the variable names and values.
  #   - When passing an Array, each element should be a String in the format "KEY=VALUE".
  #   - When passing a String, it should be in the format "KEY=VALUE" or a key when a value is also provided.
  # @param value [String, nil] The value for the environment variable if env_or_key is a key (String).
  # @return [Array<String>] The updated list of environment variables in the format "KEY=VALUE".
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#72
  def add_env(env_or_key, value = T.unsafe(nil)); end

  # Add an exposed port to the container configuration.
  #
  # @param port [String, Integer] The port to expose in the format "port/protocol" or as an integer.
  # @return [Hash] The updated list of exposed ports.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#83
  def add_exposed_port(port); end

  # Add multiple exposed ports to the container configuration.
  #
  # @param ports [Array<String, Integer>] The list of ports to expose.
  # @return [Hash] The updated list of exposed ports
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#96
  def add_exposed_ports(*ports); end

  # Add a filesystem bind to the container configuration.
  #
  # @param host_or_hash [String, Hash] The host path or a Hash with a single key-value pair representing the host and container paths.
  # @param container_path [String, nil] The container path if host_or_hash is a String.
  # @param mode [String] The access mode for the bind ("rw" for read-write, "ro" for read-only). Default is "rw".
  # @return [Array<String>] The updated list of filesystem binds in the format "host_path:container_path:mode".
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#162
  def add_filesystem_bind(host_or_hash, container_path = T.unsafe(nil), mode = T.unsafe(nil)); end

  # Add multiple filesystem binds to the container configuration.
  #
  # @param filesystem_binds [Array<String>, Array<Array<String>>, Hash] The list of filesystem binds.
  # @return [Array<String>] The updated list of filesystem binds in the format "host_path:container_path:mode".
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#187
  def add_filesystem_binds(filesystem_binds); end

  # Add a fixed exposed port to the container configuration.
  #
  # @param container_port [String, Integer, Hash] The container port in the format "port/protocol" or as an integer.
  #   When passing a Hash, it should contain a single key-value pair with the container port as the key and the host port as the value.
  # @param host_port [Integer, nil] The host port to bind the container port to.
  # @return [Hash] The updated list of port bindings.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#111
  def add_fixed_exposed_port(container_port, host_port = T.unsafe(nil)); end

  # Add multiple fixed exposed ports to the container configuration.
  #
  # @param port_mappings [Hash] The list of container ports and host ports to bind them to.
  # @return [Hash] The updated list of port bindings.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#128
  def add_fixed_exposed_ports(port_mappings = T.unsafe(nil)); end

  # Adds a healthcheck to the container.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the healthcheck options.
  # @return [Hash] the healthcheck options for Docker.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#226
  def add_healthcheck(options = T.unsafe(nil)); end

  # Add a label to the container configuration.
  #
  # @param label [String] The label to add.
  # @param value [String] The value of the label.
  # @return [Hash] The updated list of labels.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#201
  def add_label(label, value); end

  # Add multiple labels to the container configuration.
  #
  # @param labels [Hash] The labels to add.
  # @return [Hash] The updated list of labels.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#211
  def add_labels(labels); end

  # Add a volume to the container configuration.
  #
  # @param volume [String] The volume to add.
  # @return [Hash] The updated list of volumes.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#139
  def add_volume(volume); end

  # Add multiple volumes to the container configuration.
  #
  # @param volumes [Array<String>] The list of volumes to add.
  # @return [Hash] The updated list of volumes.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#149
  def add_volumes(volumes = T.unsafe(nil)); end

  # Add a wait_for strategy to the container configuration.
  #
  # @param method [Symbol, String, Proc, Array] The method to call on the container to wait for it to be ready.
  # @param args [Array] The arguments to pass to the method if it is a symbol or string.
  # @param kwargs [Hash] The keyword arguments to pass to the method if it is a symbol or string.
  # @param block [Proc] The block to call on the container to wait for it to be ready.
  # @return [Proc] The wait_for strategy.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#258
  def add_wait_for(method = T.unsafe(nil), *args, **kwargs, &block); end

  # the command to run in the container
  #
  # @return [Array<String>, nil] the current value of command
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def command; end

  # the command to run in the container
  #
  # @param value [Array<String>, nil] the value to set the attribute command to.
  # @return [Array<String>, nil] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def command=(_arg0); end

  # Copies a file from the container to the host.
  #
  # @param container_path [String] The path to the file inside the container.
  # @param host_path_or_io [String, IO] The path to the file on the host or a IO object.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @return [String] The contents of the file inside the container.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#951
  def copy_file_from_container(container_path, host_path_or_io); end

  # Copies a IO object or a file from the host to the container.
  #
  # @param container_path [String] The path to the file inside the container.
  # @param host_path_or_io [String, IO] The path to the file on the host or a IO object.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @return [self]
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#925
  def copy_file_to_container(container_path, host_path_or_io); end

  # Returns the container's created at timestamp.
  # The timestamp is in UTC and formatted as ISO 8601. Example: "2014-10-31T23:22:05.430Z".
  #
  # @return [String] The container's created at timestamp.
  # @return [nil] If the container does not exist.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#673
  def created_at; end

  # Returns whether the container is running.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [Boolean] Whether the container is running.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#583
  def dead?; end

  # Removes the container.
  #
  # @param options [Hash] Additional options to send to the container remove command.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @return [DockerContainer] The DockerContainer instance.
  # @return [nil] If the container does not exist.
  # @see #remove
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#542
  def delete(options = T.unsafe(nil)); end

  # Starts the container.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [NotFoundError] If Docker is unable to find the image.
  # @return [DockerContainer] The DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#474
  def enter; end

  # the entrypoint to run in the container
  #
  # @return [Array<String>, nil] the current value of entrypoint
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def entrypoint; end

  # the entrypoint to run in the container
  #
  # @param value [Array<String>, nil] the value to set the attribute entrypoint to.
  # @return [Array<String>, nil] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def entrypoint=(_arg0); end

  # an array of environment variables for the container in the format KEY=VALUE
  #
  # @return [Array<String>, nil] the current value of env
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def env; end

  # an array of environment variables for the container in the format KEY=VALUE
  #
  # @param value [Array<String>, nil] the value to set the attribute env to.
  # @return [Array<String>, nil] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def env=(_arg0); end

  # Executes a command in the container.
  # See https://docs.docker.com/engine/api/v1.42/#operation/ContainerExec for all available options.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param cmd [Array<String>] The command to execute.
  # @param options [Hash] Additional options to pass to the Docker Exec API. (e.g `Env`)
  # @return [Array, Array, Integer] The STDOUT, STDERR and exit code.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#796
  def exec(cmd, options = T.unsafe(nil), &block); end

  # Returns whether the container exists.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @return [Boolean] Whether the container exists.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#657
  def exists?; end

  # Stops the container.
  #
  # @param force [Boolean] Whether to force the container to stop.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [DockerContainer] The DockerContainer instance.
  # @see #stop
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#502
  def exit(force: T.unsafe(nil)); end

  # Returns whether the container is stopped.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [Boolean] Whether the container is stopped.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#621
  def exited?; end

  # a hash mapping exposed container ports to an empty hash (used for Docker API compatibility)
  #
  # @return [Hash, nil] the current value of exposed_ports
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def exposed_ports; end

  # a hash mapping exposed container ports to an empty hash (used for Docker API compatibility)
  #
  # @param value [Hash, nil] the value to set the attribute exposed_ports to.
  # @return [Hash, nil] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def exposed_ports=(_arg0); end

  # an array of strings representing bind mounts from the host to the container
  #
  # @return [Array<String>, nil] the current value of filesystem_binds
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def filesystem_binds; end

  # an array of strings representing bind mounts from the host to the container
  #
  # @param value [Array<String>, nil] the value to set the attribute filesystem_binds to.
  # @return [Array<String>, nil] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def filesystem_binds=(_arg0); end

  # Returns the container's first mapped port.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @return [Integer] The container's first mapped port.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#736
  def first_mapped_port; end

  # Returns the value for the given environment variable.
  #
  # @param key [String] The environment variable's key.
  # @return [String] The environment variable's value.
  # @return [nil] If the environment variable does not exist.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#764
  def get_env(key); end

  # a hash of healthcheck options for the container
  #
  # @return [Hash, nil] the current value of healthcheck
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def healthcheck; end

  # a hash of healthcheck options for the container
  #
  # @param value [Hash, nil] the value to set the attribute healthcheck to.
  # @return [Hash, nil] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def healthcheck=(_arg0); end

  # Returns whether the container is healthy.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [HealthcheckNotSupportedError] If the container does not support healthchecks.
  # @return [Boolean] Whether the container is healthy.
  # @return [false] If the container has not been started instead of raising an ContainerNotStartedError.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#631
  def healthy?; end

  # Returns the container's host.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [String] The container's host.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#696
  def host; end

  # the container's image name
  #
  # @return [String] the current value of image
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def image; end

  # the container's image name
  #
  # @param value [String] the value to set the attribute image to.
  # @return [String] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def image=(_arg0); end

  # Returns the container's info (inspect).
  # See https://docs.docker.com/engine/api/v1.42/#tag/Container/operation/ContainerInspect
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [Hash] The container's info.
  # @return [nil] If the container does not exist.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#684
  def info; end

  # Returns whether this is running inside a container.
  #
  # @return [Boolean] Whether this is running inside a container.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#914
  def inside_container?; end

  # Kills the container with the specified signal
  #
  # @param signal [String] The signal to send to the container.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [DockerContainer] The DockerContainer instance.
  # @return [nil] If the container does not exist.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#528
  def kill(signal: T.unsafe(nil)); end

  # a hash of labels to be applied to the container
  #
  # @return [Hash, nil] the current value of labels
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def labels; end

  # a hash of labels to be applied to the container
  #
  # @param value [Hash, nil] the value to set the attribute labels to.
  # @return [Hash, nil] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def labels=(_arg0); end

  # a logger instance for the container
  #
  # @return [Logger] the current value of logger
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#24
  def logger; end

  # a logger instance for the container
  #
  # @param value [Logger] the value to set the attribute logger to.
  # @return [Logger] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#24
  def logger=(_arg0); end

  # Returns the container's logs.
  #
  # @param stdout [Boolean] Whether to return stdout.
  # @param stderr [Boolean] Whether to return stderr.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [Array<String>] The container's logs.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#776
  def logs(stdout: T.unsafe(nil), stderr: T.unsafe(nil)); end

  # Returns the mapped host port for the given container port.
  #
  # @param port [Integer | String] The container port.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [Integer] The mapped host port.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#717
  def mapped_port(port); end

  # Returns the container's mount names.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [Array<String>] The container's mount names.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#755
  def mount_names; end

  # Returns the container's mounts.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [Array<Hash>] An array of the container's mounts.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#746
  def mounts; end

  # the container's name
  #
  # @return [String] the current value of name
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def name; end

  # the container's name
  #
  # @param value [String] the value to set the attribute name to.
  # @return [String] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def name=(_arg0); end

  # Returns whether the container is paused.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [Boolean] Whether the container is paused.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#592
  def paused?; end

  # a hash mapping container ports to host port bindings (used for Docker API compatibility)
  #
  # @return [Hash, nil] the current value of port_bindings
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def port_bindings; end

  # a hash mapping container ports to host port bindings (used for Docker API compatibility)
  #
  # @param value [Hash, nil] the value to set the attribute port_bindings to.
  # @return [Hash, nil] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def port_bindings=(_arg0); end

  # Reads the contents of a file inside the container.
  #
  # @param path [String] The path to the file.
  # @raise [ContainerNotStartedError]
  # @return [String] The contents of the file.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#975
  def read_file(path); end

  # Removes the container.
  #
  # @param options [Hash] Additional options to send to the container remove command.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @return [DockerContainer] The DockerContainer instance.
  # @return [nil] If the container does not exist.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#542
  def remove(options = T.unsafe(nil)); end

  # Restarts the container.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [DockerContainer] The DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#558
  def restart; end

  # Returns whether the container is restarting.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [Boolean] Whether the container is restarting.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#601
  def restarting?; end

  # Returns whether the container is running.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @return [Boolean] Whether the container is running.
  # @return [false] If the container has not been started instead of raising an ContainerNotStartedError.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#610
  def running?; end

  # Starts the container.
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [NotFoundError] If Docker is unable to find the image.
  # @return [DockerContainer] The DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#474
  def start; end

  # Returns the container's status.
  # Possible values are: "created", "restarting", "running", "removing", "paused", "exited", "dead".
  #
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @return [String] The container's status.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#571
  def status; end

  # Stops the container.
  #
  # @param force [Boolean] Whether to force the container to stop.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [DockerContainer] The DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#502
  def stop(force: T.unsafe(nil)); end

  # Stops the container forcefully.
  #
  # @return [DockerContainer] The DockerContainer instance.
  # @see #stop
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#517
  def stop!; end

  # Writes the contents of a file inside the container.
  #
  # @param path [String] The path to the file.
  # @param contents [String] The contents of the file.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#987
  def store_file(path, contents); end

  # Returns whether the container supports healthchecks.
  # This is determined by the presence of a healthcheck in the container's configuration.
  #
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @return [Boolean] Whether the container supports healthchecks.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#648
  def supports_healthcheck?; end

  # Starts the container, yields the container instance to the block, and stops the container.
  #
  # @return [DockerContainer] Wherever the block returns.
  # @yield [DockerContainer] The container instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#462
  def use; end

  # a hash mapping volume paths in the container to an empty hash (used for Docker API compatibility)
  #
  # @return [Hash, nil] the current value of volumes
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def volumes; end

  # a hash mapping volume paths in the container to an empty hash (used for Docker API compatibility)
  #
  # @param value [Hash, nil] the value to set the attribute volumes to.
  # @return [Hash, nil] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def volumes=(_arg0); end

  # Returns the value of attribute wait_for.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def wait_for; end

  # Sets the attribute wait_for
  #
  # @param value the value to set the attribute wait_for to.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def wait_for=(_arg0); end

  # Waits for the container to be healthy.
  #
  # @param timeout [Integer] The number of seconds to wait for the health check to be healthy.
  # @param interval [Float] The number of seconds to wait between checks.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @raise [TimeoutError] If the timeout is reached.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [HealthcheckNotSupportedError] If the container does not support healthchecks
  # @return [Boolean] Whether the container is healthy.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#836
  def wait_for_healthcheck(timeout: T.unsafe(nil), interval: T.unsafe(nil)); end

  # Waits for the container to respond to HTTP requests.
  #
  # @param timeout [Integer] The number of seconds to wait for the TCP connection to be established.
  # @param interval [Float] The number of seconds to wait between checks.
  # @param path [String] The path to request.
  # @param container_port [Integer] The container port to request.
  # @param https [Boolean] Whether to use TLS.
  # @param status [Integer] The expected HTTP status code.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @raise [TimeoutError] If the timeout is reached.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @return [Boolean] Whether the container is responding to HTTP requests.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#891
  def wait_for_http(timeout: T.unsafe(nil), interval: T.unsafe(nil), path: T.unsafe(nil), container_port: T.unsafe(nil), https: T.unsafe(nil), status: T.unsafe(nil)); end

  # Waits for the container logs to match the given regex.
  #
  # @param matcher [Regexp] The regex to match.
  # @param timeout [Integer] The number of seconds to wait for the logs to match.
  # @param interval [Float] The number of seconds to wait between checks.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @raise [TimeoutError] If the timeout is reached.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @return [Boolean] Whether the logs matched the regex.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#812
  def wait_for_logs(matcher, timeout: T.unsafe(nil), interval: T.unsafe(nil)); end

  # Waits for the container to open the given port.
  #
  # @param port [Integer] The port to wait for.
  # @param timeout [Integer] The number of seconds to wait for the port to open.
  # @param interval [Float] The number of seconds to wait between checks.
  # @raise [ContainerNotStartedError] If the container has not been started.
  # @raise [TimeoutError] If the timeout is reached.
  # @raise [ConnectionError] If the connection to the Docker daemon fails.
  # @raise [PortNotMappedError] If the port is not mapped.
  # @return [Boolean] Whether the port is open.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#861
  def wait_for_tcp_port(port, timeout: T.unsafe(nil), interval: T.unsafe(nil)); end

  # Set options for the container configuration using "with_" methods.
  #
  # @param options [Hash] A hash of options where keys correspond to "with_" methods and values are the arguments for those methods.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#300
  def with(options); end

  # Set the command for the container.
  #
  # @param parts [Array<String>] The command to run in the container as an array of strings.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#317
  def with_command(*parts); end

  # Set the entrypoint for the container.
  #
  # @param parts [Array<String>] The entry point for the container as an array of strings.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#327
  def with_entrypoint(*parts); end

  # Sets the container's environment variables.
  #
  # @param env_or_key [String, Hash, Array] The environment variable(s) to add.
  #   - When passing a Hash, the keys and values represent the variable names and values.
  #   - When passing an Array, each element should be a String in the format "KEY=VALUE".
  #   - When passing a String, it should be in the format "KEY=VALUE" or a key when a value is also provided.
  # @param value [String, nil] The value for the environment variable if env_or_key is a key (String).
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#350
  def with_env(env_or_key, value = T.unsafe(nil)); end

  # Adds a single exposed port to the container.
  #
  # @param port [String, Integer] The port to expose.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#377
  def with_exposed_port(port); end

  # Adds exposed ports to the container.
  #
  # @param ports [Array<String, Integer>] The list of ports to expose.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#368
  def with_exposed_ports(*ports); end

  # Adds filesystem binds to the container.
  #
  # @param filesystem_binds [Array, String, Hash] an array, string, or hash of filesystem binds.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#408
  def with_filesystem_binds(filesystem_binds); end

  # Adds a fixed exposed port to the container.
  #
  # @param container_port [String, Integer, Hash] The container port in the format "port/protocol" or as an integer.
  #   When passing a Hash, it should contain a single key-value pair with the container port as the key and the host port as the value.
  # @param host_port [Integer, nil] The host port to bind the container port to.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#388
  def with_fixed_exposed_port(container_port, host_port = T.unsafe(nil)); end

  # Adds a healthcheck to the container.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the healthcheck options.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#441
  def with_healthcheck(options = T.unsafe(nil)); end

  # Adds a label to the container.
  #
  # @param label [String] the label key.
  # @param value [String] the label value.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#427
  def with_label(label, value); end

  # Adds labels to the container.
  #
  # @param labels [Hash] the labels to add.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#417
  def with_labels(labels); end

  # Set the name of the container.
  #
  # @param name [String] The name of the container.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#337
  def with_name(name); end

  # Adds a fixed exposed port to the container.
  #
  # @param container_port [String, Integer, Hash] The container port in the format "port/protocol" or as an integer.
  #   When passing a Hash, it should contain a single key-value pair with the container port as the key and the host port as the value.
  # @param host_port [Integer, nil] The host port to bind the container port to.
  # @return [DockerContainer] The updated DockerContainer instance.
  # @see #with_fixed_exposed_port
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#388
  def with_port_binding(container_port, host_port = T.unsafe(nil)); end

  # Adds volumes to the container.
  #
  # @param volumes [Hash] a hash of volume key-value pairs.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#400
  def with_volumes(volumes = T.unsafe(nil)); end

  # Add a wait_for strategy to the container configuration.
  #
  # @param method [Symbol, String, Proc, Array] The method to call on the container to wait for it to be ready.
  # @param args [Array] The arguments to pass to the method if it is a symbol or string.
  # @param kwargs [Hash] The keyword arguments to pass to the method if it is a symbol or string.
  # @param block [Proc] The block to call on the container to wait for it to be ready.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#453
  def with_wait_for(method = T.unsafe(nil), *args, **kwargs, &block); end

  # Sets the container's working directory.
  #
  # @param working_dir [String] the working directory for the container.
  # @return [DockerContainer] The updated DockerContainer instance.
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#359
  def with_working_dir(working_dir); end

  # the working directory for the container
  #
  # @return [String, nil] the current value of working_dir
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def working_dir; end

  # the working directory for the container
  #
  # @param value [String, nil] the value to set the attribute working_dir to.
  # @return [String, nil] the newly set value
  #
  # source://testcontainers-core//lib/testcontainers/docker_container.rb#22
  def working_dir=(_arg0); end

  private

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1115
  def _container_create_options; end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1070
  def container_bridge_ip; end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1074
  def container_gateway_ip; end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1078
  def container_port(port); end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1082
  def container_ports; end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1087
  def default_gateway_ip; end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1096
  def docker_host; end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1028
  def normalize_filesystem_binds(filesystem_binds); end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1004
  def normalize_port(port); end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1010
  def normalize_port_bindings(port_bindings); end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#995
  def normalize_ports(ports); end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1019
  def normalize_volumes(volumes); end

  # source://testcontainers-core//lib/testcontainers/docker_container.rb#1042
  def process_env_input(env_or_key, value = T.unsafe(nil)); end
end

# source://testcontainers-core//lib/testcontainers.rb#11
class Testcontainers::Error < ::StandardError; end

# Alias for forward-compatibility
#
# source://testcontainers-core//lib/testcontainers/docker_container.rb#1136
Testcontainers::GenericContainer = Testcontainers::DockerContainer

# source://testcontainers-core//lib/testcontainers.rb#21
class Testcontainers::HealthcheckNotSupportedError < ::Testcontainers::Error; end

# source://testcontainers-core//lib/testcontainers.rb#15
class Testcontainers::NotFoundError < ::Testcontainers::Error; end

# source://testcontainers-core//lib/testcontainers.rb#23
class Testcontainers::PortNotMappedError < ::Testcontainers::Error; end

# source://testcontainers-core//lib/testcontainers.rb#17
class Testcontainers::TimeoutError < ::Testcontainers::Error; end

# source://testcontainers-core//lib/testcontainers/version.rb#4
Testcontainers::VERSION = T.let(T.unsafe(nil), String)
